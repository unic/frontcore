/* eslint-disable no-console */
import fs from "fs";
import path from "path";
import MFS from "memory-fs";
import webpack from "webpack";
import webpackDevMiddleware from "webpack-dev-middleware";
import webpackHotMiddleware from "webpack-hot-middleware";
import clientConfig from "../../../webpack.client.config";
import serverConfig from "../../../webpack.server.config";
import createRenderer from "./create-renderer";
import { readFile, handleWebpackBuildErrors } from "./utils";

export default () => {
  const state = {
    /* client manifest built by webpack and passed to createBundleRenderer */
    clientManifest: undefined,
    /* webpack compiler for client bundle */
    clientCompiler: undefined,
    /* webpack dev middleware for building client bundle */
    clientBundleMiddleware: undefined,
    /* webpack hot middleware for updating client bundle */
    clientHotMiddleware: undefined,
    /* stores a reference to Promise.resolve() so we can push updates */
    ready: undefined,
    /* promise that we resolve with a renderer for use in server/app.js */
    readyPromise: undefined,
    /* vue-server-renderer bundle renderer */
    renderer: undefined,
    /* server bundle built by webpack and passed to createBundleRenderer */
    serverBundle: undefined,
    /* template passed to createBundleRenderer */
    template: undefined,
  };

  state.readyPromise = new Promise((resolve) => {
    state.ready = resolve;
  });

  /**
   * @description Checks for required assets. Creates a server-side renderer and calls resolves state.readyPromise with the renderer
   * @returns {unefined}
   */
  const update = () => {
    if (state.serverBundle && state.clientManifest && state.template) {
      state.renderer = createRenderer(state.serverBundle, {
        template: state.template,
        clientManifest: state.clientManifest,
      });

      state.ready(state.renderer);
    }
  };

  /**
   * @description reads the template into `state`
   */
  const getTemplate = () => {
    const templatePath = path.join(__dirname, "../index.template.html");
    state.template = fs.readFileSync(templatePath, "utf-8");
    update();
  };

  /**
   * @description Creates a webpack compiler for client bundle. Uses webpack-dev-middleware to run compiler as express middleware. Adds hot module replacement middleware for pushing changes to client code to browser without refresh.
   */
  const setupClientCompiler = () => {
    /* modify client config to work with hot middleware */
    clientConfig.entry.app = [
      "webpack-hot-middleware/client",
      clientConfig.entry.app,
    ];
    clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin());

    /* setup webpack for client bundle */
    state.clientCompiler = webpack(clientConfig);
    /* dev middleware runs webpack config */
    state.clientBundleMiddleware = webpackDevMiddleware(state.clientCompiler, {
      publicPath: clientConfig.output.publicPath,
    });
    /* hot middleware injects changes to client-side JS */
    state.clientHotMiddleware = webpackHotMiddleware(state.clientCompiler, {
      /* How often to send heartbeat updates to the client to keep the connection alive. */
      heartbeat: 5000,
    });

    /* listen for webpack client build to finish and push */
    state.clientCompiler.hooks.done.tap("client build", (stats) => {
      const errors = handleWebpackBuildErrors(stats);
      if (errors.length > 0) {
        return;
      }

      state.clientManifest = JSON.parse(
        readFile(
          state.clientCompiler.outputFileSystem,
          "vue-ssr-client-manifest.json"
        )
      );
      update();
    });
  };

  /**
   * @description Creates a webpack compiler for server bundle.
   */
  const setupServerCompiler = () => {
    state.serverCompiler = webpack(serverConfig);
    const mfs = new MFS();
    state.serverCompiler.outputFileSystem = mfs;

    /* run webpack server compiler */
    state.serverCompiler.run((error, stats) => {
      /* handle node error */
      if (error) {
        throw error;
      }
      const errors = handleWebpackBuildErrors(stats);
      if (errors.length > 0) {
        return;
      }

      // read bundle generated by vue-ssr-webpack-plugin
      state.serverBundle = JSON.parse(
        readFile(mfs, "vue-ssr-server-bundle.json")
      );
      update();
    });
  };

  const init = () => {
    getTemplate();
    setupClientCompiler();
    setupServerCompiler();
  };

  init();

  return state;
};
